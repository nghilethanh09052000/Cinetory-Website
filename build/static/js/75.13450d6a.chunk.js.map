{"version":3,"file":"static/js/75.13450d6a.chunk.js","mappings":"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","sources":["Utils/Assets.js","Utils/checkValue.js","Utils/index.js","pages/Contact/Component/ContactItem.jsx","pages/Contact/Component/ContactForm.jsx","pages/Contact/Contact.jsx","styles/customTransition.js"],"sourcesContent":["\r\n\r\nexport const getUrl = (path) =>{\r\n    let PUBLIC_URL = `${process.env.PUBLIC_URL}`\r\n    if(path.startsWith(`${PUBLIC_URL}/`))\r\n    {\r\n     \r\n        path = path.slice(PUBLIC_URL.length+1)\r\n    }\r\n    let finalPath = path.startsWith('/') \r\n        ? `${PUBLIC_URL}${path}`\r\n        : `${PUBLIC_URL}${path}`\r\n    return finalPath\r\n}\r\n\r\nexport const getImageUrl = (asset) =>\r\n{\r\n    return getUrl('/images/Quan/'+ asset)\r\n}\r\n\r\nexport const getImageCategoryUrl = (asset) =>\r\n{\r\n    return getUrl('/images/Category/'+ asset)\r\n}\r\n\r\nexport const getViewDemoUrl = (categories,name) =>{\r\n    let demo = categories.filter(category=>{\r\n        return category.name===name\r\n    })\r\n    let src = demo[0].category[0].iframe\r\n    return src\r\n            .split(\" \")[1]\r\n            .split('src=')[1]\r\n            .replace(/\"/g,'')\r\n}","var validator = require(\"email-validator\");\r\n \r\n\r\nexport const checkValue = (type,value) =>{\r\n    switch(type){\r\n        case 'name':\r\n            let regex = /^([a-zA-Z ]){0,30}$/\r\n            if(regex.test(value)){\r\n                return {\r\n                    type:type,\r\n                    error:false\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return {\r\n                    type:type,\r\n                    error:true\r\n                }\r\n            }\r\n        case 'email':\r\n            let emailCheck = validator.validate(value) \r\n            if(emailCheck){\r\n                return {\r\n                    type:type,\r\n                    error:false\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return {\r\n                    type:type,\r\n                    error:true\r\n                }\r\n            }\r\n        default:\r\n            return false\r\n    }\r\n}","import * as Assets from './Assets'\r\nimport * as checkValue from './checkValue'\r\n\r\nconst Utils = {\r\n    getUrl: Assets.getUrl,\r\n    getImageUrl: Assets.getImageUrl,\r\n    getViewDemoUrl:Assets.getViewDemoUrl,\r\n    checkValue:checkValue.checkValue\r\n}\r\nexport default Utils","import {\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nconst ContactItem = ({contact }) => {\r\n    const { icon,content, info }=contact\r\n  \r\n    return (\r\n        <Grid item md={3} xs={12}>\r\n            <Avatar\r\n                sx={{ width: 30, height: 30,bgcolor:\"#fff\" }}\r\n            >\r\n                {icon}\r\n            </Avatar>\r\n            <div>\r\n                <Typography \r\n                    variant=\"body1\"\r\n                >\r\n                    {content}\r\n                </Typography>\r\n                <Typography \r\n                       variant=\"caption\"\r\n                >\r\n                    {info}\r\n                </Typography>\r\n            </div>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default ContactItem;\r\n","import AccountCircle from '@mui/icons-material/AccountCircle';\r\nimport Utils from '../../../Utils';\r\nimport Api from '../../../api/api';\r\nimport EmailIcon from '@mui/icons-material/Email';\r\nimport { Box,\r\n        Grid,\r\n        Typography,\r\n        Paper,\r\n        Card,\r\n        CardMedia,\r\n        CardContent,\r\n        Avatar,\r\n        FormControl,\r\n        InputLabel,\r\n        Input,\r\n        InputAdornment,\r\n        TextField,\r\n        Button,\r\n        Divider\r\n} \r\nfrom \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useState } from 'react';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nconst ContactForm = () => {\r\n    const { t } = useTranslation()\r\n\r\n    const [name,setName] = useState('')\r\n    const [email,setEmail] = useState('')\r\n    const [message,setMessage] = useState('')\r\n    const [error , setError] = useState(false)\r\n    const handleValueChange = (e,type) =>{\r\n        let check\r\n        switch(type){\r\n            case 'name': \r\n                setName(e.target.value)\r\n                check = Utils.checkValue(type,e.target.value)\r\n                setError(check)\r\n                break;\r\n            case 'email': \r\n                setEmail(e.target.value)\r\n                check = Utils.checkValue(type,e.target.value)\r\n                setError(check)\r\n                break;\r\n            case 'message': \r\n                setMessage(e.target.value)\r\n                break;\r\n            default: \r\n                return ''\r\n        }\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        let data\r\n        if(error.error===true) setError(...error,error.value===true)\r\n        if(name.length <=0 || email.length<=0)\r\n        {\r\n            setError(...error,error.value===true)\r\n        } else{\r\n            data={\r\n                name:name,\r\n                email:email,\r\n                message:message\r\n            }\r\n            let send = Api.sendEmail(data)\r\n        }\r\n    }\r\n    return (\r\n        <Box style={{marginTop:'20px'}}>\r\n            <Grid \r\n                container \r\n                rowSpacing={4} \r\n                columnSpacing={{md:6,xs:2}} \r\n            >\r\n                <Grid item md={6} xs={12}>\r\n                    <FormControl \r\n                        variant=\"standard\"\r\n                        focused={name==='' ? true : false}\r\n                        required={true}\r\n                        error={error.type==='name' && error.error }\r\n                        >\r\n                        <InputLabel htmlFor=\"name\">\r\n                            {t(\"Contact.FullName\")}\r\n                        </InputLabel>\r\n                        <Input\r\n                            id=\"input-with-icon-adornment\"\r\n                            onChange={(e,name)=>handleValueChange(e,'name')}\r\n                            startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <AccountCircle />\r\n                            </InputAdornment>\r\n                        }\r\n                        />\r\n                    </FormControl>\r\n                    {error.type==='name' && error.error === true\r\n                    &&\r\n                        <Typography color='error' variant='body2'>\r\n                            {t('Error.ErrorName')}\r\n                        </Typography>\r\n                    }\r\n                  \r\n\r\n                </Grid>\r\n                <Grid item md={6} xs={12}>\r\n                    <FormControl \r\n                        variant=\"standard\"\r\n                        required={true}\r\n                        focused={name.length >0 && error.error=== false ? true : false}\r\n                        error={error.type==='email' && error.error}\r\n                        disabled={\r\n                            (name.length <=0 || (error.type==='name' && error.error === true ))\r\n                            ? true\r\n                            : false\r\n                            }\r\n                    >\r\n                        <InputLabel htmlFor=\"email\">\r\n                        {t(\"Contact.CustomerEmail\")}\r\n                        </InputLabel>\r\n                        <Input\r\n                        id=\"input-with-icon-adornment\"\r\n                        onChange={(e,name)=>handleValueChange(e,'email')}\r\n                        startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <EmailIcon/>\r\n                            </InputAdornment>\r\n                        }\r\n                        />\r\n                    </FormControl>\r\n                    {error.type==='email' && error.error === true\r\n                    &&\r\n                        <Typography color='error' variant='body2'>\r\n                            {t('Error.ErrorEmail')}\r\n                        </Typography>\r\n                    }\r\n                </Grid>\r\n                <Grid item md={12} xs={12}>\r\n                    <TextField\r\n                        label={t(\"Contact.Message\")}\r\n                        multiline\r\n                        variant=\"outlined\"\r\n                        rows={3}\r\n                        fullWidth\r\n                        disabled={\r\n                            email.length <=0 || (error.type==='name') || (error.type==='email' && error.error===true)\r\n                            ? true\r\n                            : false\r\n                        }\r\n                        onChange={(e,name)=>handleValueChange(e,'message')}\r\n                    />\r\n                </Grid>\r\n                <Grid item md={12} xs={12}>\r\n                    <Button\r\n                       variant=\"contained\"\r\n                       endIcon={<SendIcon/>}\r\n                       onClick={(e)=>handleSubmit(e)}\r\n                       disabled={\r\n                           (name.length <=0 \r\n                        || email.length<=0 \r\n                        || error.error===true)\r\n                        ? true\r\n                        : false\r\n                     }\r\n                    >\r\n                        {t(\"Contact.Send\")}\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        \r\n        </Box>\r\n      );\r\n}\r\n \r\nexport default ContactForm;","import { motion } from \"framer-motion\";\r\nimport customTransition from \"../../styles/customTransition\";\r\nimport customStyles from \"../../styles/customStyles\";\r\nimport Utils from \"../../Utils\";\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n  Avatar,\r\n  FormControl,\r\n  InputLabel,\r\n  Input,\r\n  InputAdornment,\r\n} from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PhoneInTalkIcon from \"@mui/icons-material/PhoneInTalk\";\r\nimport EmailIcon from \"@mui/icons-material/Email\";\r\nimport FacebookIcon from \"@mui/icons-material/Facebook\";\r\nimport InstagramIcon from \"@mui/icons-material/Instagram\";\r\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\r\n\r\nimport ContactItem from \"./Component/ContactItem\";\r\nimport ContactForm from \"./Component/ContactForm\";\r\n\r\nconst Contact = () => {\r\n  const { t } = useTranslation();\r\n  const contacts = [\r\n    {\r\n      icon: <PhoneInTalkIcon sx={{ ...customStyles().iconColor }} />,\r\n      content: t(\"Contact.Phone\"),\r\n      info: `+` + t(\"Contact.Phone_Name\"),\r\n    },\r\n    {\r\n      icon: <EmailIcon sx={{ ...customStyles().iconColor }} />,\r\n      content: t(\"Contact.Email\"),\r\n      info: t(\"Contact.Email_Name\"),\r\n    },\r\n    {\r\n      icon: <FacebookIcon sx={{ ...customStyles().iconColor }} />,\r\n      content: t(\"Contact.Facebook\"),\r\n      info: t(\"Contact.Facebook_Name\"),\r\n    },\r\n    {\r\n      icon: <InstagramIcon sx={{ ...customStyles().iconColor }} />,\r\n      content: t(\"Contact.Instagram\"),\r\n      info: t(\"Contact.Instagram_Name\"),\r\n    },\r\n  ];\r\n  return (\r\n    <motion.div\r\n      initial=\"hidden\"\r\n      animate=\"visible\"\r\n      variants={customTransition.variant}\r\n    >\r\n      <LazyLoadImage\r\n        effect=\"blur\"\r\n        placeholderSrc={`${Utils.getImageUrl(\"Contact.jpg\")}`}\r\n        opacity={1}\r\n        src={`${Utils.getImageUrl(\"Contact.jpg\")}`}\r\n        alt=\"\"\r\n        style={customStyles().backgroundMenu}\r\n      />\r\n      <div\r\n        style={{\r\n          ...customStyles().divCenter,\r\n          zIndex: \"1000\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Box>\r\n            <Typography\r\n              variant=\"h5\"\r\n              noWrap\r\n              sx={{\r\n                flexGrow: 1,\r\n                fontFamily: \"monospace\",\r\n                fontWeight: 700,\r\n                letterSpacing: \".3rem\",\r\n                color: \"#fff\",\r\n                textDecoration: \"none\",\r\n              }}\r\n            >\r\n              {t(\"Contact.Contact\")}\r\n            </Typography>\r\n          </Box>\r\n          <Card sx={{ bgcolor: \"#fff\" ,display: { xs: \"flex\", md: \"block\" }}}>\r\n              <Grid container rowSpacing={2} columnSpacing={{ md: 6, xs: 2 }}>\r\n                {contacts.map((contact, index) => (\r\n                  <ContactItem key={index} contact={contact} />\r\n                ))}\r\n              </Grid>\r\n              <ContactForm />\r\n\r\n          </Card>\r\n        </Box>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","const customTransition ={\r\n    variant:{\r\n        hidden: { \r\n            opacity: 0 \r\n        },\r\n        visible: {\r\n             opacity: 1 \r\n        },\r\n    }\r\n  \r\n}\r\n\r\nexport default customTransition;"],"names":["getUrl","path","PUBLIC_URL","process","startsWith","slice","length","validator","require","Assets","getImageUrl","asset","getViewDemoUrl","categories","name","filter","category","iframe","split","replace","checkValue","type","value","test","error","validate","contact","icon","content","info","Grid","item","md","xs","Avatar","sx","width","height","bgcolor","Typography","variant","t","useTranslation","useState","setName","email","setEmail","message","setMessage","setError","handleValueChange","e","check","target","Utils","Box","style","marginTop","container","rowSpacing","columnSpacing","FormControl","focused","required","InputLabel","htmlFor","Input","id","onChange","startAdornment","InputAdornment","position","AccountCircle","color","disabled","Email","TextField","label","multiline","rows","fullWidth","Button","endIcon","Send","onClick","data","preventDefault","Api","handleSubmit","contacts","PhoneInTalk","customStyles","iconColor","Facebook","Instagram","motion","initial","animate","variants","customTransition","LazyLoadImage","effect","placeholderSrc","opacity","src","alt","backgroundMenu","divCenter","zIndex","noWrap","flexGrow","fontFamily","fontWeight","letterSpacing","textDecoration","Card","display","map","index","hidden","visible"],"sourceRoot":""}